@startuml

interface Database {
    +getVotingPeriod(ElectionId): VotingPeriod
    +addVote(ElectionId)
    +getCandidateDocuments(ElectionId): Document[]
    +getCandidates(ElectionId)
}

interface Announcement{
    +announce()
}

abstract class Election

interface IVotingSystem
class VotingSystem implements IVotingSystem

interface IApprovalSystem {
    +sendDocument(Head)
}
class ApprovalSystem implements IApprovalSystem

interface Document {
    +getContent()
}

abstract class Head implements User {
    +rejectElectionResults()
    +informStudent()
}

'USERS
interface User {
    + getCredentials()  
}
interface Admin extends User 

interface Student extends Voter {
    +isCandidate(): boolean
    +canBeCandidate(): boolean
}
interface Representative extends Student
class FacultyRepresentative implements Representative
class DepartmentRepresentative implements Representative {
    +applyForFacultyElection(): boolean
}
interface Voter extends User {
    + sendVote(Candidate)
}
class DeansOffice extends Admin
class DepartmentHead extends Head
class FacultyHead extends Head


' ANNOUNCEMENT
class WinnerAnnouncement implements Announcement 
class RuleAnnouncement implements Announcement

' DOCUMENT
class RulesDocument implements Document 
class CandidateDocument implements Document

class ElectionId {
    -start: Date
    -end: Date
    -type: ElectionType
}

enum ElectionType{
    FacultyRepresentative
    DepartmentRepresentative
}

@enduml
