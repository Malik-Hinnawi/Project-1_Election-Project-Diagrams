@startuml

interface Authentication {
    +login()
    +logout()
    +isIZTECHMember(): boolean
}

interface Database {
    +getElection(ElectionId): Election
    +addVote(ElectionId)
    +getCandidateDocuments(ElectionId): Document[]
    +getCandidates(ElectionId)
    +getFacultiesInAlphabeticalOrder(): String[]
}

interface Announcement{
    '+announce()
}

interface ElectionController {
    + startElection()
    + endElection()
    + calculateWinner()
}

interface AnnouncementController

interface DocumentController {
    +sendDocument(Head)
}


interface Document {
    +getContent()
}

class Head implements User {
    -type: HeadType
    +rejectElectionResults()
    +informStudent()
}

enum HeadType {
    FacultyHead
    DepartmentHead
}

interface User {
}

interface Admin extends User 

interface Student extends Voter {
    +isCandidate(): boolean
    +canBeCandidate(): boolean
}


interface Representative extends Student

class FacultyRepresentative implements Representative

class DepartmentRepresentative implements Representative {
    +applyForFacultyElection(): boolean
}

interface Voter extends User {
    + sendVote(Candidate)
}

class DeansOffice implements Admin {
    + announceResult(ElectionId)
    + announceRules()
}



class WinnerAnnouncement implements Announcement 

class RuleAnnouncement implements Announcement

class RulesDocument implements Document 

class CandidateDocument implements Document

abstract class Election {
    - id: ElectionId
    - winner: Student
    - candidates: Student[]
}

class FacultyRElection extends Election 

class DepartmentRElection extends Election 

class ElectionId {
    -start: Date
    -end: Date
}



' Relations
Election -right-> "1" ElectionId
Election -- ElectionController
Student "1..*"-right-o Election
ElectionController -- AnnouncementController
AnnouncementController -- Announcement
DocumentController -- Document
Database -- DocumentController
ElectionController -- Database 
User -left- Authentication
Head -down-> "1" HeadType
@enduml
